================================================================================
DETAILED ANALYSIS: UNIVERSAL ZERO ACCURACY CASES - RACKET
================================================================================

These 16 questions achieved 0% accuracy across ALL 5 languages.
Analysis focuses on Racket implementations with generated code examples.
Configuration: DIRECT

============================================================
QUESTION #1: HumanEval_116_sort_array
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; In this Kata, you have to sort a list of non-negative integers according to
  ;; number of ones in their binary representation in ascending order.
  ;; For similar number of ones, sort based on decimal value.
  ;; It must be implemented like this:
  ;; >>> (sort_array (list 1 5 2 3 4))
  ;; (list 1 2 3 4 5)

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 3 times
    - Exception_exit_1: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (sort_array arr)
    (cond
      [(null? arr) '()]
      [(all-negative? arr) (sort arr >)]
      [else (sort arr (lambda (a b)
                        (let ([ones-a (count-ones a)]
                              [ones-b (count-ones b)])
                          (if (equal? ones-a ones-b)
                              (<= a b)
                              (<= ones-a ones-b))))]))
  
  (define (count-ones n)
  ... (truncated)

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (sort_array arr)
    (cond
      [(null? arr) '()]
      [(and (null? (cdr arr)) (not (negative? (car arr)))) (list (car arr))]
      [else
       (let ([key (lambda (x)
                    (if (negative? x)
                        (list (- (abs x)) #f)  ; negative numbers: use absolute value, mark as negative
                        (list (count-ones x) x)))]
             [sorted (sort arr (lambda (a b)
                                 (let ([a-key (key a)]
                                       [b-key (key b)]]
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #2: HumanEval_129_minPath
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
  ;; each cell of the grid contains a value. Every integer in the range [1, N * N]
  ;; inclusive appears exactly once on the cells of the grid.
  ;; You have to find the minimum path of length k in the grid. You can start
  ;; from any cell, and in each step you can move to any of the neighbor cells,
  ;; in other words, you can go to cells which share an edge with you current

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_1: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (test-humaneval) 
  
    (let (( candidate minPath))
      (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)
      (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)
      (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)
      (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)
      (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)
      (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)
      (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)
      (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)
      (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)
  ... (truncated)

Status: Exception
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (test-humaneval) 
  
    (let (( candidate minPath))
      (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list 1 2 1) 0.001)
      (check-within (candidate (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1) (list 1) 0.001)
      (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2) 0.001)
      (check-within (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14 9 2)) 7) (list 1 10 1 10 1 10 1) 0.001)
      (check-within (candidate (list (list 8 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1) 0.001)
      (check-within (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1) 0.001)
      (check-within (candidate (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12) (list 1 6 1 6 1 6 1 6 1 6 1 6) 0.001)
      (check-within (candidate (list (list 2 7 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3) 0.001)
      (check-within (candidate (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5) 0.001)
  ... (truncated)

Status: Exception
Exit Code: 1


============================================================
QUESTION #3: HumanEval_130_tri
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
  ;; the last couple centuries. However, what people don't know is Tribonacci sequence.
  ;; Tribonacci sequence is defined by the recurrence:
  ;; tri(1) = 3
  ;; tri(n) = 1 + n / 2, if n is even.
  ;; tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (tri n)
    (cond
      [(= n -1) '()]
      [(= n 0) '(1)]
      [(= n 1) '(1 3)]
      [else
       (let loop ([i 2] [result (list 1 3)])
         (if (= i (add1 n))
             result
             (let ([next-val
                    (if (even? i)
                        (+ 1 (/ i 2))
  ... (truncated)

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (tri n)
    (if (= n 0)
        (list 1)
        (let loop ([i 1] [result (list 1 3)])
          (if (= i n)
              result
              (let ([next-val (if (even? i)
                                  (+ 1 (/ i 2))
                                  (+ (list-ref result (- i 1)) 
                                     (list-ref result (- i 2)) 
                                     (list-ref result (+ i 1))))]
                (loop (+ i 1) (cons next-val result))))))
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #4: HumanEval_132_is_nested
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Create a function that takes a string as input which contains only square brackets.
  ;; The function should return #t if and only if there is a valid subsequence of brackets 
  ;; where at least one bracket in the subsequence is nested.
  ;; >>> (is_nested "[[]]")
  ;; #t
  ;; >>> (is_nested "[]]]]]]][[[[[]")

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 3 times
    - SyntaxError_exit_1: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (is_nested string)
    (define (is_nested_helper str depth max-depth)
      (cond
        [(string=? str "") #f]
        [(char=? (string-ref str 0) #\[)
         (let ([new-depth (+ depth 1)])
           (if (>= new-depth max-depth)
               #t
               (is_nested_helper (substring str 1) new-depth (max max-depth new-depth))))]
        [(char=? (string-ref str 0) #\])
         (if (zero? depth)
             #f
  ... (truncated)

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (is_nested string)
    (define (is_valid_and_nested? s)
      (define (is_balanced? str)
        (define (count_open str)
          (define (helper i count)
            (cond
              [(= i (string-length str)) count]
              [(char=? (string-ref str i) #\[(char)) (+ count 1)]
              [else count]))
          (helper 0 0))
        (define (count_close str)
          (define (helper i count)
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #5: HumanEval_134_check_if_last_char_is_a_letter
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Create a function that returns #t if the last character
  ;; of a given string is an alphabetical character and is not
  ;; a part of a word, and #f otherwise.
  ;; Note: "word" is a group of characters separated by space.
  ;; Examples:
  ;; >>> (check_if_last_char_is_a_letter "apple pie")

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 3 times
    - Exception_exit_1: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (check_if_last_char_is_a_letter txt)
    (cond
      [(string=? txt "") #f]
      [else
       (let ([last-char (string-ref txt (- (string-length txt) 1))])
         (and (char-alphabetic? last-char)
              (not (regexp-match? #px"\\b[a-zA-Z]\\b" (substring txt (- (string-length txt) 1))))))]))

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (check_if_last_char_is_a_letter txt)
    (cond
      [(string=? txt "") #f]
      [(string-ends-with? txt " ") #f]
      [else
       (let ([last-char (string-ref txt (- (string-length txt) 1))])
         (and (char-alphabetic? last-char)
              (not (char-whitespace? (string-ref txt (- (string-length txt) 2))))))]))

Status: Exception
Exit Code: 1


============================================================
QUESTION #6: HumanEval_135_can_arrange
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Create a function which returns the largest index of an element which
  ;; is not greater than or equal to the element immediately preceding it. If
  ;; no such element exists then return -1. The given list will not contain
  ;; duplicate values.
  ;; Examples:
  ;; >>> (can_arrange (list 1 2 4 3 5))

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (can_arrange arr)
    (define n (length arr))
    (cond
      [(<= n 1) -1]
      [else
       (define indices (for/list ([i (in-range 1 n)]
                                  [x (in-list arr)])
                        (if (<= x (list-ref arr (- i 1)))
                            i
                            #f)))
       (if (null? indices)
           -1
  ... (truncated)

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (can_arrange arr)
    (define n (length arr))
    (cond
      [(<= n 1) -1]
      [else
       (define indices (for/list ([i (in-range 1 n)])
                         (if (<= (list-ref arr i) (list-ref arr (sub1 i)))
                             i
                             #f)))
       (if (null? indices)
           -1
           (apply max indices))]))

Status: Exception
Exit Code: 0


============================================================
QUESTION #7: HumanEval_145_order_by_points
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Write a function which sorts the given list of integers
  ;; in ascending order according to the sum of their digits.
  ;; Note: if there are several items with similar sum of their digits,
  ;; order them based on their index in original list.
  ;; For example:
  ;; >>> (order_by_points (list 1 11 -1 -11 -12))

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 1 times
    - SyntaxError_exit_1: 3 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (order_by_points nums)
    (cond
      [(null? nums) '()]
      [else
       (define (sum-of-digits n)
         (define (sum-helper n acc)
           (if (= n 0)
               acc
               (+ (remainder n 10) (sum-helper (quotient n 10) acc))))
         (if (< n 0)
             (- (sum-helper (- n) 0))
             (sum-helper n 0)))
  ... (truncated)

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (order_by_points nums)
    (if (null? nums)
        '()
        (let ([sum-digits (lambda (n)
                            (let loop ([n (abs n)] [sum 0])
                              (if (= n 0)
                                  sum
                                  (loop (quotient n 10) (+ sum (remainder n 10))))))])
          (sort nums
                (lambda (a b)
                  (let ([sum-a (sum-digits a)]
                        [sum-b (sum-digits b)])
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #8: HumanEval_160_do_algebra
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Given two lists operator, and operand. The first list has basic algebra operations, and 
  ;; the second list is a list of integers. Use the two given lists to build the algebric 
  ;; expression and return the evaluation of this expression.
  ;; The basic algebra operations:
  ;; Addition ( + ) 
  ;; Subtraction ( - ) 

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_1: 2 times
    - SyntaxError_exit_1: 1 times
    - Exception_exit_0: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (do_algebra operator operand)
    (define (apply-operation acc op val)
      (cond
        [(equal? op '+) (+ acc val)]
        [(equal? op '-) (- acc val)]
        [(equal? op '* ) (* acc val)]
        [(equal? op '//) (floor-div acc val)]
        [(equal? op '**) (expt acc val)]
        [else (error "Unsupported operation")]))
    
    (if (null? operator)
      (error "Operator list must have at least one operator")
  ... (truncated)

Status: Exception
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (test-humaneval) 
  
    (let (( candidate do_algebra))
      (check-within (candidate (list "**" "*" "+") (list 2 3 4 5)) 37 0.001)
      (check-within (candidate (list "+" "*" "-") (list 2 3 4 5)) 9 0.001)
      (check-within (candidate (list "//" "*") (list 7 3 4)) 8 0.001)
  ))

Status: Exception
Exit Code: 1


============================================================
QUESTION #9: HumanEval_162_string_to_md5
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Given a string 'text', return its md5 hash equivalent string.
  ;; If 'text' is an empty string, return #f.
  ;; >>> (string_to_md5 "Hello world")
  ;; "3e25960a79dbc69b674cd4ec67a72c62"

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_1: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (string_to_md5 text)
    (if (string=? text "")
        #f
        (md5/bytes (string->bytes/utf-8 text))))

Status: Exception
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (string_to_md5 text)
    (if (string? text)
        (if (string=? text "")
            #f
            (let ([md5-hash (md5 text)])
              (string->symbol (format "~a" md5-hash))))
        #f))

Status: Exception
Exit Code: 1


============================================================
QUESTION #10: HumanEval_163_generate_integers
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Given two positive integers a and b, return the even digits between a
  ;; and b, in ascending order.
  ;; For example:
  ;; >>> (generate_integers 2 8)
  ;; (list 2 4 6 8)
  ;; >>> (generate_integers 8 2)

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 3 times
    - Exception_exit_1: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (generate_integers a b)
    (define start (min a b))
    (define end (max a b))
    
    (define (even-digits-in-range n)
      (define digits (list->string (number->string n)))
      (define even-digits (filter (lambda (d) (even? (string->number (string d)))) (string->list digits)))
      (map string->number even-digits))
    
    (define (get-even-digits-from-n-to-m n m)
      (define result '())
      (define (helper i)
  ... (truncated)

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (generate_integers a b)
    (let* ((min-val (min a b))
           (max-val (max a b))
           (result '()))
      (for*/list ([n (in-range min-val (add1 max-val))])
        (let loop ([digit 0])
          (if (zero? digit)
              (begin
                (if (even? n)
                    (set! result (cons n result))
                    #f)
                #f)
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #11: HumanEval_37_sort_even
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; This function takes a list l and returns a list l' such that
  ;; l' is identical to l in the odd indicies, while its values at the even indicies are equal
  ;; to the values of the even indicies of l, but sorted.
  ;; >>> (sort_even (list 1 2 3))
  ;; (list 1 2 3)
  ;; >>> (sort_even (list 5 6 3 4))

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 3 times
    - Exception_exit_0: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (sort_even l)
    (define even-elements (map car (filter (lambda (x) (even? (car x))) (map (lambda (i x) (cons i x)) (enumerate l) l))))
    (define sorted-evens (sort even-elements <))
    (define result (map (lambda (i x) 
                          (if (even? i)
                              (list-ref sorted-evens (quotient i 2))
                              x))
                        (enumerate l) l))
    (map (lambda (i x) 
           (if (even? i)
               (list-ref sorted-evens (quotient i 2))
               x))
  ... (truncated)

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (sort_even l)
    (define even-elements (map car (filter (lambda (x) (even? (car x))) (map (lambda (i x) (cons i x)) (enumerate l) l))))
    (define sorted-evens (sort even-elements <))
    (define result (map (lambda (i x) 
                          (if (even? i) 
                              (list-ref sorted-evens (quotient i 2))
                              x))
                        (enumerate l) l))
    (map (lambda (pair) (cdr pair)) result))

Status: Exception
Exit Code: 0


============================================================
QUESTION #12: HumanEval_54_same_chars
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Check if two words have the same characters.
  ;; >>> (same_chars "eabcdzzzz" "dddzzzzzzzddeddabc")
  ;; #t
  ;; >>> (same_chars "abcd" "dddddddabc")
  ;; #t
  ;; >>> (same_chars "dddddddabc" "abcd")

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (same_chars s0 s1)
    (equal? (sort (string->list s0) char<?)
            (sort (string->list s1) char<?)))

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (same_chars s0 s1)
    (equal? (sort (string->list s0) char<?)
            (sort (string->list s1) char<?)))

Status: Exception
Exit Code: 0


============================================================
QUESTION #13: HumanEval_68_pluck
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; "Given a list representing a branch of a tree that has non-negative integer nodes
  ;; your task is to pluck one of the nodes and return it.
  ;; The plucked node should be the node with the smallest even value.
  ;; If multiple nodes with the same smallest even value are found return the node that has smallest index.
  ;; The plucked node should be returned in a list, [ smalest_value, its index ],
  ;; If there are no even values or the given list is empty, return [].

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 3 times
    - Exception_exit_0: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (pluck arr)
    (if (null? arr)
        '()
        (let loop ([lst arr] [min-even #f] [min-index #f])
          (cond
            [(null? lst) 
             (if min-even
                 (list min-even min-index)
                 '())]
            [else
             (let ([current (car lst)]
                   [current-index (cadr (cons current (list 0)))]) ; This is wrong - we need to track index properly
  ... (truncated)

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (pluck arr)
    (cond
      [(null? arr) '()]
      [else
       (let loop ([lst arr] [idx 0] [min-even #f])
         (cond
           [(null? lst) (if min-even (list min-even (index-of-min-even lst min-even)) '())]
           [(even? (car lst))
            (let ([current-value (car lst)])
              (if (or (not min-even) (< current-value min-even)))
                (loop (cdr lst) (+ idx 1) current-value)
                (loop (cdr lst) (+ idx 1) min-even)))]
  ... (truncated)

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #14: HumanEval_84_solve
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Given a positive integer N, return the total sum of its digits in binary.
  ;; Example
  ;; >>> (solve 1000)
  ;; "1"
  ;; >>> (solve 150)
  ;; "110"

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 1 times
    - Exception_exit_1: 3 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (solve N)
    (define sum-of-digits
      (apply + 
             (map (lambda (digit) (char->integer (integer->char digit))) 
                  (string->list (number->string N))))) ; Convert number to string, then to list of chars
    (number->string sum-of-digits 2)) ; Convert sum to binary string

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (solve N)
    (define sum-of-digits
      (define (sum-digits n)
        (if (= n 0)
            0
            (+ (remainder n 10) (sum-digits (quotient n 10)))))
      (sum-digits N))
    
    (define sum-in-binary
      (number->string sum-of-digits 2))
    
    sum-in-binary)

Status: Exception
Exit Code: 1


============================================================
QUESTION #15: HumanEval_91_is_bored
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; You'll be given a string of words, and your task is to count the number
  ;; of boredoms. A boredom is a sentence that starts with the word "I".
  ;; Sentences are delimited by '.', '?' or '!'.
  ;; For example:
  ;; >>> (is_bored "Hello world")
  ;; 0

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - SyntaxError_exit_1: 3 times
    - Exception_exit_0: 1 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (is_bored S)
    (define sentences
      (regexp-split #px"[.!?]" S))
    
    (define count 0)
    (for ([sentence sentences])
      (define trimmed (string-trim sentence))
      (when (and (not (string=? trimmed ""))
                 (string-prefix? "I " trimmed)))
        (set! count (+ count 1))))

Status: SyntaxError
Exit Code: 1

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (is_bored S)
    (define sentences (regexp-split #px"[.!?]" S))
    (define count 0)
    (for ([sentence sentences])
      (when (and (not (string=? sentence "")) 
                 (string-prefix? "I " sentence)))
        (set! count (+ count 1))))

Status: SyntaxError
Exit Code: 1


============================================================
QUESTION #16: HumanEval_92_any_int
============================================================

PROBLEM DESCRIPTION:
--------------------
  #lang racket
  ;; Create a function that takes 3 numbers.
  ;; Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
  ;; Returns false in any other cases.
  ;; Examples
  ;; >>> (any_int 5 2 7)
  ;; #t

TEST CASES:
-----------
  (define (test-humaneval)
  (test-humaneval)

FAILURE ANALYSIS:
----------------
  Total attempts: 4
  Successful: 0
  Failed: 4

  Failure patterns:
    - Exception_exit_0: 4 times
  Common error types:
    - Other error: 4 times

EXAMPLE FAILURE #1:
--------------------
Generated Function:
  (define (any_int x y z)
    (and
     (integer? x)
     (integer? y)
     (integer? z)
     (or (= x (+ y z))
         (= y (+ x z))
         (= z (+ x y)))))

Status: Exception
Exit Code: 0

EXAMPLE FAILURE #2:
--------------------
Generated Function:
  (define (any_int x y z)
    (and (integer? x) (integer? y) (integer? z)
         (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))

Status: Exception
Exit Code: 0


================================================================================
OVERALL PATTERNS AND INSIGHTS - RACKET
================================================================================

Common issues observed across these universal failing questions:

1. Racket-specific syntax issues:
   - S-expression and parentheses balancing problems
   - List processing and recursion errors
   - Function definition syntax issues

2. Logic errors:
   - Incorrect algorithm implementation
   - Off-by-one errors in loops
   - Misunderstanding of problem requirements

3. Edge case handling:
   - Poor handling of empty collections
   - Incorrect handling of special input values
   - Missing validation for boundary conditions

These patterns suggest the LLM needs better training on:
- Modern Racket syntax and idioms
- Algorithm implementation in Racket
- Edge case handling and input validation
- Language-specific data structure manipulation